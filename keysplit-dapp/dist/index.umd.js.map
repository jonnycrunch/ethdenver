{"version":3,"file":null,"sources":["../src/wordEncode.js","../src/KeySplit.js","../src/keySplitWeb3.js","../src/hashPass.js","../src/app.js"],"sourcesContent":["/*\n * This module does bip39-like encoding of byte strings to words. It removes\n * the constraint from the original bip39 module to ensure that the encoded\n * bytes are 128 < x < 256 bits. We still want to use bip39 for encoding and\n * decoding actual keys, but when it comes to encoding the Shamir's Secret\n * Sharing shards we want a human-readable encoding that can exceed 256 bits\n * and may not be divisible by 4.\n */\n\nimport bip39 from 'bip39';\nimport createHash from 'create-hash';\nimport unorm from 'unorm';\n\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\n\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nexport function entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === bip39.wordlists.JA ? words.join('\\u3000') : words.join(' ')\n}\n\nexport function mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  // if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n","import secrets from 'secrets.js-next';\nimport bip39 from 'bip39';\nimport {entropyToMnemonic} from './wordEncode.js';\nimport {mnemonicToEntropy} from './wordEncode.js';\nimport crypto from 'crypto';\nimport rp from 'request-promise-native';\n\nfunction repeat(char, number) {\n  var string = \"\";\n  for(var i = 0; i < number; i++) {\n    string += char;\n  }\n  return string;\n}\n\nclass ApiEndpoint {\n  constructor(apiServer) {\n    this.apiServer = apiServer\n  }\n  upload(body) {\n    return rp({\n      method: 'POST',\n      uri: apiServer,\n      body: body,\n      json: true\n    });\n  }\n  download(shardid) {\n    return rp({\n      method: 'GET',\n      uri: `${this.apiServer}?id=${shardid}`,\n      json: true\n    });\n  }\n}\n\nvar passwordStore = {};\n\nclass KeySplit {\n  constructor(options={}) {\n    if(typeof window === \"undefined\") {\n      var window = {};\n    }\n    this.apiUrl = options.apiUrl || \"https://cgr6zthug7.execute-api.us-east-2.amazonaws.com/keysplit\";\n    this.localStorage = options.localStorage || window.localStorage;\n    this.account = options.account;\n    passwordStore[this] = options.password;\n  }\n  mnemonicToSSS(mnemonic, shareCount, threshold, password) {\n    password = password || passwordStore[this];\n    var key = bip39.mnemonicToEntropy(mnemonic);\n    var salt = crypto.randomBytes(8);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n        var encKey = c.update(key, 'hex', 'hex');\n        encKey += c.final('hex')\n        var splitVal = salt.toString(\"hex\") + encKey;\n        var shares = secrets.share(splitVal, shareCount, threshold);\n        var mnemonicShares = [];\n        for(var share of shares) {\n          mnemonicShares.push(entropyToMnemonic(share + \"000\"));\n        }\n        resolve(mnemonicShares);\n      });\n    });\n  }\n  combineSSS(mnemonicShares, password) {\n    password = password || passwordStore[this];\n    var shares = [];\n    for(var share of mnemonicShares) {\n      var shareHex = mnemonicToEntropy(share);\n      shares.push(shareHex.slice(0, shareHex.length - 3));\n    }\n    var splitVal = secrets.combine(shares);\n    var salt = new Buffer(splitVal.slice(0, 16), \"hex\");\n    var encKey = splitVal.slice(16);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var d = crypto.createDecipher(\"aes128\", pbkdf2Pass);\n        var rawKey = d.update(encKey, \"hex\", \"hex\");\n        rawKey += d.final(\"hex\");\n        return bip39.entropyToMnemonic(rawKey);\n      });\n    })\n  }\n  uploadShard(shard, uploader) {\n    uploader = uploader || new ApiEndpoint(this.apiUrl);\n    var hash = crypto.createHash('sha256');\n    var shardHex = mnemonicToEntropy(shard);\n    hash.update(shardHex, \"hex\")\n    var result = {\n      shardid: hash.digest(),\n      key: crypto.randomBytes(32),\n    }\n    var c = crypto.createCipher(\"aes256\", result.key);\n    var encShard = c.update(shardHex, \"hex\", \"base64\");\n    encShard += c.final(\"base64\");\n    if(this.localStorage) {\n      var shardList = JSON.parse(this.localStorage.getItem(`${this.account}:shards`));\n      if(shardList.indexOf(result.shardid.toString(\"hex\")) < 0) {\n        shardList.push(result.shardid.toString(\"hex\"));\n      }\n      this.localStorage.setItem(`${this.account}:shards`, JSON.stringify(shardList));\n    }\n    return uploader.upload({shardid: result.shardid, data: encShard}).then((response) => {\n      result.objectid = response;\n      return result\n    });\n  }\n  downloadShard(pathAndKey, downloader) {\n    downloader = downloader || new ApiEndpoint(this.apiUrl);\n    var objectid, key;\n    [objectid, key] = pathAndKey.split(\":\");\n    return downloader.download(objectid).then((response) => {\n      console.log(objectid, key);\n      var d = crypto.createDecipher(\"aes256\", new Buffer(key, \"base64\"));\n      var shardHex = d.update(response.data, \"base64\", \"hex\");\n      shardHex += d.final(\"hex\");\n      return entropyToMnemonic(shardHex);\n    })\n  }\n  saveShard(shard, password) {\n    return new Promise((resolve, reject) => {\n      password = password || passwordStore[this];\n      var salt = crypto.randomBytes(8);\n      crypto.pbkdf2Sync(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err); return }\n        var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n        var shardHex = mnemonicToEntropy(shard);\n        var encShard = c.update(shardHex, 'hex', 'hex');\n        encShard += c.final('hex');\n        var splitVal = salt.toString(\"hex\") + encShard;\n        var hash = crypto.createHash('sha256');\n        hash.update(shardHex, \"hex\")\n        var shardId = hash.digest(\"hex\");\n        this.localStorage.setItem(`encShard:${shardId}`, splitVal);\n        var shardList = JSON.parse(this.localStorage.getItem(`${this.account}:heldShards`));\n        if(shardList.indexOf(shardId) < 0) {\n          shardList.push(shardId);\n        }\n        this.localStorage.setItem(`${this.account}:heldShards`, JSON.stringify(shardList));\n        resolve(shardId);\n      });\n    });\n  }\n  getShard(shardId, password) {\n    return new Promise((resolve, reject) => {\n      var splitVal = this.localStorage.getItem(`encShard:${shardId}`);\n      var salt = new Buffer(splitVal.slice(0, 16), \"hex\");\n      var encShard = splitVal.slice(16);\n      crypto.pbkdf2Sync(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var d = crypto.createDecipher(\"aes128\", pbkdf2Pass);\n        var rawShard = d.update(encShard, \"hex\", \"hex\");\n        rawShard += d.final(\"hex\");\n        resolve(bip39.entropyToMnemonic(rawShard));\n      });\n    })\n  }\n};\n\nexport default KeySplit;\n","\nimport ShardStore from \"../solidity/build/contracts/ShardStore.json\";\n\nimport BigNumber from \"bignumber.js\";\n\nexport class KeySplitContractInterface {\n  constructor (options={}) {\n    this.web3 = options.web3;\n    this.contract = this.web3.eth.contract(ShardStore.abi).at(options.at || \"0x8cdaf0cd259887258bc13a92c0a6da92698644c0\");\n\n    if(this.localStorage) {\n      this.web3.eth.getAccounts((err, accounts) => {\n        var shardList = JSON.parse(this.localStorage.getItem(`${accounts[0]}:shards`));\n        for(var shard of shardList) {\n          getStorageConfirmed(shard);\n        }\n      });\n    }\n  }\n\n  stop() {\n    if(this.engine) {\n      this.engine.stop();\n    }\n  }\n\n  deploy() {\n    this.web3.eth.getAccounts((err, accounts) => {\n      if(err) {\n        console.log(err);\n        return;\n      }\n      var defaultAccount = accounts[0];\n      this.web3.eth.contract(ShardStore.abi).new({data: ShardStore.bytecode, gas: 1000000, from: defaultAccount}, (err, data) => {\n        console.log(data);\n      });\n    })\n  }\n\n  confirmStorage(shardIds) {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.getAccounts((err, accounts) => {\n        if(err) { reject(err); return; }\n        var defaultAccount = accounts[0];\n        var shardNumbers = [];\n        for(var shardId of shardIds){\n          shardNumbers.push(new BigNumber(shardId, 16));\n        }\n        console.log(shardNumbers);\n        this.contract.confirmStorage.estimateGas(shardNumbers, {from: defaultAccount}, (err, gas) => {\n          this.contract.confirmStorage(shardNumbers, {from: defaultAccount, gas: gas}, (err, tx) => {\n            if(err) {\n              reject(err);\n              return;\n            }\n            var confirmations = [];\n            for(var shardId of shardIds) {\n              confirmations.push(this.watchStorageConfirmed(shardId));\n            }\n            resolve(Promise.all(confirmations));\n          });\n        })\n      });\n    })\n  }\n\n  watchStorageConfirmed(shardId) {\n    return new Promise((resolve, reject) => {\n      var watcher = this.contract.StorageConfirmed({fromBlock: \"latest\", shardId: new BigNumber(shardId, 16)});\n      watcher.watch((err, evt) => {\n        if(err) {\n          watcher.stopWatching(() => {});\n          reject(err)\n        }\n        watcher.stopWatching(() => {});\n        if(this.localStorage) {\n          this.localStorage.setItem(`shard:${shardId}`, JSON.stringify({block: evt.blockNumber, trustedContact: evt.args.trustedContact}));\n        }\n        resolve({block: evt.blockNumber, trustedContact: evt.args.trustedContact});\n      });\n    });\n  }\n\n  getStorageConfirmed(shardId) {\n    if(this.localStorage) {\n      var shardData = JSON.parse(this.localStorage.getItem(`shard:${shardId}`));\n    } else {\n      var shardData = {block: 0};\n    }\n    return new Promise((resolve, reject) => {\n      var watcher = this.contract.StorageConfirmed({fromBlock: shardData.block, shardId: new BigNumber(shardId, 16)});\n      watcher.get((err, evts) => {\n        if(err) {\n          reject(err)\n        }\n        for(var evt of evts) {\n          if(evt.blockNumber > shardData.block) {\n            if(this.localStorage) {\n              this.localStorage.setItem(`shard:${shardId}`, JSON.stringify({block: evt.blockNumber, trustedContact: evt.args.trustedContact}));\n            }\n            resolve({block: evt.blockNumber, trustedContact: evt.args.trustedContact});\n          }\n        }\n      });\n    });\n  }\n  getShardStatus() {\n    return new Promise((resolve, reject) => {\n      if(!this.localStorage) {\n        resolve([]);\n      }\n      this.web3.eth.getAccounts((err, accounts) => {\n        var shardJSON = this.localStorage.getItem(`${accounts[0]}:shards`);\n        if(!shardJSON) {\n          reject(\"No shards yet\");\n        }\n        var shardIds = JSON.parse(shardJSON);\n        var shards = [];\n        for(var shardId of shardIds) {\n          var shard = JSON.parse(this.localStorage.getItem(`shard:${shardId}`));\n          shard.update = this.watchStorageConfirmed(shardId);\n        }\n        resolve(shards);\n      });\n    })\n  }\n  getHeldShards() {\n    return JSON.parse(this.localStorage.getItem(`${this.account}:heldShards`));\n  }\n  confirmStoredShards() {\n    return new Promise((resolve, reject) => {\n      if(!this.localStorage) {\n        resolve([]);\n      }\n      var heldShards = JSON.parse(this.localStorage.getItem(`${this.account}:heldShards`));\n      var currentShards = [];\n      for(var shardId of heldShards) {\n        if(this.localStorage.getItem(`encShard${shardId}`)) {\n          currentShards.push(shardId);\n        }\n      }\n      return confirmStorage(currentShards);\n    });\n  }\n\n\n\n}\n","import crypto from 'crypto';\n\nexport class PasswordManagement {\n  constructor(localStorage) {\n    this.localStorage = localStorage;\n  }\n  hashPass(password) {\n    var salt = crypto.randomBytes(8);\n    return new Promise((resolve, reject) => {\n      crypto.pbkdf2(password, salt, 100000, 16, 'sha256', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        resolve({hash: pbkdf2Pass.toString(\"hex\"), salt: salt.toString(\"hex\")});\n      });\n    });\n  }\n  checkPass(password, hash, salt) {\n    return new Promise((resolve, reject) => {\n      crypto.pbkdf2(password, new Buffer(salt, \"hex\"), 100000, 16, 'sha256', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        resolve(pbkdf2Pass.equals(new Buffer(hash, \"hex\")));\n      });\n    })\n  }\n  storePass(password, account) {\n    return this.hashPass(password).then((result) => {\n      this.localStorage.setItem(`${account}:password`, JSON.stringify(result));\n    })\n  }\n  checkAccountPass(password, account) {\n    var pdata = JSON.parse(this.localStorage.getItem(`${account}:password`));\n    if(pdata) {\n      return this.checkPass(password, pdata.hash, pdata.salt);\n    } else {\n      return Promise.resolve(false);\n    }\n  }\n  hasAccountPass(account) {\n    return !!this.localStorage.getItem(`${account}:password`);\n  }\n}\n","import KeySplit from './KeySplit.js';\nimport {PasswordManagement} from './hashPass.js';\nimport {KeySplitContractInterface} from './keySplitWeb3.js';\n\nimport Web3 from \"web3\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport FixtureSubprovider from \"web3-provider-engine/subproviders/fixture.js\";\nimport FilterSubprovider from \"web3-provider-engine/subproviders/filters.js\";\nimport WalletSubprovider from \"ethereumjs-wallet/provider-engine\";\nimport Web3Subprovider from \"web3-provider-engine/subproviders/web3.js\";\n\nimport Wallet from \"ethereumjs-wallet\";\n\n\nexport class App {\n  /*\n   * Construct with {}\n   */\n  constructor(options={}) {\n    var rpcURL = options.rpcURL || \"https://ropsten.infura.io/atjfYkLXBNdLI0zSm9eE\"\n    if(typeof window === 'undefined') {\n      var window = {};\n    }\n    this.localStorage = options.localStorage || window.localStorage;\n    if(options.currentProvider) {\n      this.web3 = new Web3(options.currentProvider);\n    } else if(window && window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      var privateKey = options.privateKey || localStorage.getItem(\"localPrivateKey\");\n      if(!privateKey) {\n        privateKey = Wallet.generate().getPrivateKeyString().slice(2);\n        if(localStorage) {\n        localStorage.setItem(\"localPrivateKey\", privateKey)}\n      }\n      var wallet = Wallet.fromPrivateKey(new Buffer(privateKey, \"hex\"));\n      this.engine = new ProviderEngine();\n      this.web3 = new Web3(this.engine);\n      // static results\n      this.engine.addProvider(new FixtureSubprovider({\n        web3_clientVersion: 'ProviderEngine/v0.0.0/javascript',\n        net_listening: true,\n        eth_hashrate: '0x00',\n        eth_mining: false,\n        eth_syncing: true,\n      }))\n\n      // filters\n      this.engine.addProvider(new FilterSubprovider())\n\n      // id mgmt\n      this.engine.addProvider(new WalletSubprovider(wallet, {}))\n\n      this.engine.addProvider(new Web3Subprovider(new Web3.providers.HttpProvider(rpcURL)));\n\n      this.engine.on('block', function(block) {\n        console.log('BLOCK CHANGED:', '#'+block.number.toString('hex'), '0x'+block.hash.toString('hex'))\n      })\n\n      // network connectivity error\n      this.engine.on('error', function(err){\n        // report connectivity errors\n        console.error(err.stack)\n      });\n\n      // start polling for blocks\n      this.engine.start()\n    }\n    this.PasswordManagement = new PasswordManagement(this.localStorage);\n    this.ContractInterface = new KeySplitContractInterface({web3: this.web3, at: options.at});\n    this.KeySplitPromise = new Promise((resolve, reject) => {\n      this.ksResolve = resolve;\n      this.ksReject = reject;\n    });\n\n    this.account = new Promise((resolve, reject) => {\n      this.web3.eth.getAccounts((err, accounts) => {\n        if(err) { reject(err) }\n        resolve(accounts[0]);\n      })\n    })\n  }\n  hasAccount() {\n    return this.account.then((account) => {\n      return this.PasswordManagement.hasAccountPass(account);\n    })\n  }\n  signUp(password) {\n    return this.account.then((account) => {\n      this.ksResolve(new KeySplit({account: account, password: password}));\n      return this.PasswordManagement.storePass(password, account);\n    })\n  }\n  signIn(password) {\n    return this.account.then((account) => {\n      var result = this.PasswordManagement.checkAccountPass(password, account);\n      result.then(() => {\n        this.ksResolve(new KeySplit({account: account, password: password}));\n      });\n      return result\n    })\n  }\n  confirmFromUrlHash() {\n    return new Promise((resolve, reject) => {\n      var hash = window.location.hash.slice(1);\n      if(!hash) {\n        reject(\"No shard in url\");\n      }\n      this.KeySplitPromise.then((KeySplit) => {\n        return KeySplit.downloadShard(hash).then((shardMnemonic) => {\n          return KeySplit.saveShard(shardMnemonic)\n        })\n      }).then((shardId) => {\n        return this.KeySplitContractInterface.confirmStoredShards();\n      })\n    })\n  }\n  splitSeedAndUpload(seed) {\n    this.KeySplitPromise.then((KeySplit) => {\n      return KeySplit.mnemonicToSSS(seed, 5, 3).then((mnemonicShards) => {\n        var shards = [];\n        for(var shard of mnemonicShards) {\n          shards.push(KeySplit.uploadShard(shard));\n        }\n        return Promise.all(shards);\n      });\n    }).then((results) => {\n      var urls = [];\n      for(var result of results) {\n        urls.push(`${window.location.origin}${window.location.pathame}#${result.objectid}:${result.key.toString(\"base64\")}`);\n      }\n      return urls;\n    })\n  }\n  distributedShardData() {\n    return this.KeySplitContractInterface.getShardStatus()\n  }\n  heldShardData() {\n    return getHeldShards();\n  }\n  getShardMnemonic(shardId) {\n    return this.KeySplitContractInterface.getShard(shardId);\n  }\n  currentBlock() {\n    return new Promise((resolve, reject) => {\n      this.web3.getBlockNumber((err, blocknum) => {\n        if(err) { reject(err) }\n        resolve(blocknum);\n      })\n    });\n  }\n}\n"],"names":["INVALID_ENTROPY","INVALID_MNEMONIC","INVALID_CHECKSUM","bytesToBinary","bytes","map","x","lpad","toString","join","binaryToByte","bin","parseInt","str","padString","length","deriveChecksumBits","entropyBuffer","ENT","CS","hash","createHash","update","digest","slice","call","entropyToMnemonic","entropy","wordlist","Buffer","isBuffer","from","bip39","wordlists","EN","TypeError","entropyBits","checksumBits","bits","chunks","match","words","binary","index","JA","mnemonicToEntropy","mnemonic","unorm","nfkd","split","word","indexOf","Error","dividerIndex","Math","floor","entropyBytes","newChecksum","ApiEndpoint","apiServer","body","rp","shardid","passwordStore","KeySplit","options","window","apiUrl","localStorage","account","password","shareCount","threshold","key","salt","crypto","randomBytes","Promise","resolve","reject","pbkdf2","err","pbkdf2Pass","c","createCipher","encKey","final","splitVal","shares","secrets","share","mnemonicShares","push","shareHex","combine","d","createDecipher","rawKey","shard","uploader","shardHex","result","encShard","shardList","JSON","parse","getItem","setItem","stringify","upload","data","then","response","objectid","pathAndKey","downloader","download","log","pbkdf2Sync","shardId","rawShard","KeySplitContractInterface","web3","contract","eth","ShardStore","abi","at","getAccounts","accounts","engine","stop","defaultAccount","new","bytecode","gas","shardIds","shardNumbers","BigNumber","confirmStorage","estimateGas","tx","confirmations","watchStorageConfirmed","all","watcher","StorageConfirmed","fromBlock","watch","evt","stopWatching","block","blockNumber","trustedContact","args","shardData","get","evts","shardJSON","shards","heldShards","currentShards","PasswordManagement","equals","hashPass","pdata","checkPass","App","rpcURL","currentProvider","Web3","privateKey","Wallet","generate","getPrivateKeyString","wallet","fromPrivateKey","ProviderEngine","addProvider","FixtureSubprovider","FilterSubprovider","WalletSubprovider","Web3Subprovider","providers","HttpProvider","on","number","error","stack","start","ContractInterface","KeySplitPromise","ksResolve","ksReject","hasAccountPass","storePass","checkAccountPass","location","downloadShard","shardMnemonic","saveShard","confirmStoredShards","seed","mnemonicToSSS","mnemonicShards","uploadShard","results","urls","origin","pathame","getShardStatus","getHeldShards","getShard","getBlockNumber","blocknum"],"mappings":"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"}