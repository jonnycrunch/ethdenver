{"version":3,"file":null,"sources":["../src/wordEncode.js","../src/KeySplit.js"],"sourcesContent":["/*\n * This module does bip39-like encoding of byte strings to words. It removes\n * the constraint from the original bip39 module to ensure that the encoded\n * bytes are 128 < x < 256 bits. We still want to use bip39 for encoding and\n * decoding actual keys, but when it comes to encoding the Shamir's Secret\n * Sharing shards we want a human-readable encoding that can exceed 256 bits\n * and may not be divisible by 4.\n */\n\nimport bip39 from 'bip39';\nimport createHash from 'create-hash';\nimport unorm from 'unorm';\n\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\n\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nexport function entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === bip39.wordlists.JA ? words.join('\\u3000') : words.join(' ')\n}\n\nexport function mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  // if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n","import secrets from 'secrets.js-next';\nimport bip39 from 'bip39';\nimport {entropyToMnemonic} from './wordEncode.js';\nimport {mnemonicToEntropy} from './wordEncode.js';\nimport crypto from 'crypto';\nimport rp from 'request-promise-native';\n\nfunction repeat(char, number) {\n  var string = \"\";\n  for(var i = 0; i < number; i++) {\n    string += char;\n  }\n  return string;\n}\n\nclass ApiEndpoint {\n  constructor(apiServer) {\n    this.apiServer = apiServer\n  }\n  upload(body) {\n    return rp({\n      method: 'POST',\n      uri: apiServer,\n      body: body,\n      json: true\n    });\n  }\n  download(shardid) {\n    return rp({\n      method: 'GET',\n      uri: `${this.apiServer}?id=${shardid}`,\n      json: true\n    });\n  }\n}\n\nvar passwordStore = {};\n\nclass KeySplit {\n  constructor(password, apiUrl) {\n    this.apiUrl = apiUrl || \"https://cgr6zthug7.execute-api.us-east-2.amazonaws.com/keysplit\";\n    passwordStore[this] = password;\n  }\n  mnemonicToSSS(mnemonic, shareCount, threshold, password) {\n    password = password || passwordStore[this];\n    var key = bip39.mnemonicToEntropy(mnemonic);\n    var salt = crypto.randomBytes(8);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n        var encKey = c.update(key, 'hex', 'hex');\n        encKey += c.final('hex')\n        var splitVal = salt.toString(\"hex\") + encKey;\n        var shares = secrets.share(splitVal, shareCount, threshold);\n        var mnemonicShares = [];\n        for(var share of shares) {\n          mnemonicShares.push(entropyToMnemonic(share + \"000\"));\n        }\n        resolve(mnemonicShares);\n      });\n    });\n  }\n  combineSSS(mnemonicShares, password) {\n    password = password || passwordStore[this];\n    var shares = [];\n    for(var share of mnemonicShares) {\n      var shareHex = mnemonicToEntropy(share);\n      shares.push(shareHex.slice(0, shareHex.length - 3));\n    }\n    var splitVal = secrets.combine(shares);\n    var salt = new Buffer(splitVal.slice(0, 16), \"hex\");\n    var encKey = splitVal.slice(16);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var d = crypto.createDecipher(\"aes128\", pbkdf2Pass);\n        var rawKey = d.update(encKey, \"hex\", \"hex\");\n        rawKey += d.final(\"hex\");\n        return bip39.entropyToMnemonic(rawKey);\n      });\n    })\n  }\n  uploadShard(shard, uploader) {\n    uploader = uploader || new ApiEndpoint(this.apiUrl);\n    var hash = crypto.createHash('sha256');\n    var shardHex = mnemonicToEntropy(shard);\n    hash.update(shardHex, \"hex\")\n    var result = {\n      shardid: hash.digest(),\n      key: crypto.randomBytes(32),\n    }\n    var c = crypto.createCipher(\"aes256\", result.key);\n    var encShard = c.update(shardHex, \"hex\", \"base64\");\n    encShard += c.final(\"base64\");\n    return uploader.upload({shardid: result.shardid, data: encShard}).then((response) => {\n      result.objectid = response;\n      return result\n    });\n  }\n  downloadShard(pathAndKey, downloader) {\n    downloader = downloader || new ApiEndpoint(this.apiUrl);\n    var objectid, key;\n    [objectid, key] = pathAndKey.split(\":\");\n    return downloader.download(objectid).then((response) => {\n      console.log(objectid, key);\n      var d = crypto.createDecipher(\"aes256\", new Buffer(key, \"base64\"));\n      var shardHex = d.update(response.data, \"base64\", \"hex\");\n      shardHex += d.final(\"hex\");\n      return entropyToMnemonic(shardHex);\n    })\n  }\n  saveShard(shard, password) {\n    password = password || passwordStore[this];\n    var salt = crypto.randomBytes(8);\n    var pbkdf2Pass = crypto.pbkdf2Sync(password, salt, 100000, 16, 'sha512');\n    var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n    var encKey = c.update(key, 'hex', 'hex');\n    encKey += c.final('hex')\n\n  }\n};\n\nexport default KeySplit;\n"],"names":["INVALID_ENTROPY","INVALID_MNEMONIC","INVALID_CHECKSUM","bytesToBinary","bytes","map","x","lpad","toString","join","binaryToByte","bin","parseInt","str","padString","length","deriveChecksumBits","entropyBuffer","ENT","CS","hash","createHash","update","digest","slice","call","entropyToMnemonic","entropy","wordlist","Buffer","isBuffer","from","bip39","wordlists","EN","TypeError","entropyBits","checksumBits","bits","chunks","match","words","binary","index","JA","mnemonicToEntropy","mnemonic","unorm","nfkd","split","word","indexOf","Error","dividerIndex","Math","floor","entropyBytes","newChecksum","ApiEndpoint","apiServer","body","rp","shardid","passwordStore","KeySplit","password","apiUrl","shareCount","threshold","key","salt","crypto","randomBytes","resolve","reject","pbkdf2","err","pbkdf2Pass","c","createCipher","encKey","final","splitVal","shares","secrets","share","mnemonicShares","push","shareHex","combine","d","createDecipher","rawKey","shard","uploader","shardHex","result","encShard","upload","data","then","response","objectid","pathAndKey","downloader","download","log","pbkdf2Sync"],"mappings":"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"}