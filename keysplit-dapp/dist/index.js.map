{"version":3,"file":null,"sources":["../src/wordEncode.js","../src/KeySplit.js","../src/keySplitWeb3.js"],"sourcesContent":["/*\n * This module does bip39-like encoding of byte strings to words. It removes\n * the constraint from the original bip39 module to ensure that the encoded\n * bytes are 128 < x < 256 bits. We still want to use bip39 for encoding and\n * decoding actual keys, but when it comes to encoding the Shamir's Secret\n * Sharing shards we want a human-readable encoding that can exceed 256 bits\n * and may not be divisible by 4.\n */\n\nimport bip39 from 'bip39';\nimport createHash from 'create-hash';\nimport unorm from 'unorm';\n\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\n\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nexport function entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === bip39.wordlists.JA ? words.join('\\u3000') : words.join(' ')\n}\n\nexport function mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  // if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n","import secrets from 'secrets.js-next';\nimport bip39 from 'bip39';\nimport {entropyToMnemonic} from './wordEncode.js';\nimport {mnemonicToEntropy} from './wordEncode.js';\nimport crypto from 'crypto';\nimport rp from 'request-promise-native';\n\nfunction repeat(char, number) {\n  var string = \"\";\n  for(var i = 0; i < number; i++) {\n    string += char;\n  }\n  return string;\n}\n\nclass ApiEndpoint {\n  constructor(apiServer) {\n    this.apiServer = apiServer\n  }\n  upload(body) {\n    return rp({\n      method: 'POST',\n      uri: apiServer,\n      body: body,\n      json: true\n    });\n  }\n  download(shardid) {\n    return rp({\n      method: 'GET',\n      uri: `${this.apiServer}?id=${shardid}`,\n      json: true\n    });\n  }\n}\n\nvar passwordStore = {};\n\nclass KeySplit {\n  constructor(password, apiUrl) {\n    this.apiUrl = apiUrl || \"https://cgr6zthug7.execute-api.us-east-2.amazonaws.com/keysplit\";\n    passwordStore[this] = password;\n  }\n  mnemonicToSSS(mnemonic, shareCount, threshold, password) {\n    password = password || passwordStore[this];\n    var key = bip39.mnemonicToEntropy(mnemonic);\n    var salt = crypto.randomBytes(8);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n        var encKey = c.update(key, 'hex', 'hex');\n        encKey += c.final('hex')\n        var splitVal = salt.toString(\"hex\") + encKey;\n        var shares = secrets.share(splitVal, shareCount, threshold);\n        var mnemonicShares = [];\n        for(var share of shares) {\n          mnemonicShares.push(entropyToMnemonic(share + \"000\"));\n        }\n        resolve(mnemonicShares);\n      });\n    });\n  }\n  combineSSS(mnemonicShares, password) {\n    password = password || passwordStore[this];\n    var shares = [];\n    for(var share of mnemonicShares) {\n      var shareHex = mnemonicToEntropy(share);\n      shares.push(shareHex.slice(0, shareHex.length - 3));\n    }\n    var splitVal = secrets.combine(shares);\n    var salt = new Buffer(splitVal.slice(0, 16), \"hex\");\n    var encKey = splitVal.slice(16);\n    return new Promise((resolve, reject) => {\n      return crypto.pbkdf2(password, salt, 100000, 16, 'sha512', (err, pbkdf2Pass) => {\n        if(err) { reject(err) }\n        var d = crypto.createDecipher(\"aes128\", pbkdf2Pass);\n        var rawKey = d.update(encKey, \"hex\", \"hex\");\n        rawKey += d.final(\"hex\");\n        return bip39.entropyToMnemonic(rawKey);\n      });\n    })\n  }\n  uploadShard(shard, uploader) {\n    uploader = uploader || new ApiEndpoint(this.apiUrl);\n    var hash = crypto.createHash('sha256');\n    var shardHex = mnemonicToEntropy(shard);\n    hash.update(shardHex, \"hex\")\n    var result = {\n      shardid: hash.digest(),\n      key: crypto.randomBytes(32),\n    }\n    var c = crypto.createCipher(\"aes256\", result.key);\n    var encShard = c.update(shardHex, \"hex\", \"base64\");\n    encShard += c.final(\"base64\");\n    return uploader.upload({shardid: result.shardid, data: encShard}).then((response) => {\n      result.objectid = response;\n      return result\n    });\n  }\n  downloadShard(pathAndKey, downloader) {\n    downloader = downloader || new ApiEndpoint(this.apiUrl);\n    var objectid, key;\n    [objectid, key] = pathAndKey.split(\":\");\n    return downloader.download(objectid).then((response) => {\n      console.log(objectid, key);\n      var d = crypto.createDecipher(\"aes256\", new Buffer(key, \"base64\"));\n      var shardHex = d.update(response.data, \"base64\", \"hex\");\n      shardHex += d.final(\"hex\");\n      return entropyToMnemonic(shardHex);\n    })\n  }\n  saveShard(shard, password) {\n    password = password || passwordStore[this];\n    var salt = crypto.randomBytes(8);\n    var pbkdf2Pass = crypto.pbkdf2Sync(password, salt, 100000, 16, 'sha512');\n    var c = crypto.createCipher(\"aes128\", pbkdf2Pass);\n    var encKey = c.update(key, 'hex', 'hex');\n    encKey += c.final('hex')\n\n  }\n};\n\nexport default KeySplit;\n","import Web3 from \"web3\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport FixtureSubprovider from \"web3-provider-engine/subproviders/fixture.js\";\nimport FilterSubprovider from \"web3-provider-engine/subproviders/filters.js\";\nimport WalletSubprovider from \"ethereumjs-wallet/provider-engine\";\nimport Web3Subprovider from \"web3-provider-engine/subproviders/web3.js\";\n\nimport ShardStore from \"../solidity/build/contracts/ShardStore.json\";\n\nimport Wallet from \"ethereumjs-wallet\";\nimport BigNumber from \"bignumber.js\";\n\nexport class KeySplitContractInterface {\n  constructor (options={}) {\n    var rpcURL = options.rpcURL || \"https://ropsten.infura.io/atjfYkLXBNdLI0zSm9eE\"\n    if(typeof window === 'undefined') {\n      var window = {};\n    }\n    this.localStorage = options.localStorage || window.localStorage;\n    if(options.currentProvider) {\n      this.web3 = new Web3(options.currentProvider);\n    } else if(window && window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      var privateKey = options.privateKey || localStorage.getItem(\"localPrivateKey\");\n      if(!privateKey) {\n        privateKey = Wallet.generate().getPrivateKeyString().slice(2);\n      }\n      var wallet = Wallet.fromPrivateKey(new Buffer(privateKey, \"hex\"));\n      this.engine = new ProviderEngine();\n      this.web3 = new Web3(this.engine);\n      // static results\n      this.engine.addProvider(new FixtureSubprovider({\n        web3_clientVersion: 'ProviderEngine/v0.0.0/javascript',\n        net_listening: true,\n        eth_hashrate: '0x00',\n        eth_mining: false,\n        eth_syncing: true,\n      }))\n\n      // filters\n      this.engine.addProvider(new FilterSubprovider())\n\n      // id mgmt\n      this.engine.addProvider(new WalletSubprovider(wallet, {}))\n\n      this.engine.addProvider(new Web3Subprovider(new Web3.providers.HttpProvider(rpcURL)));\n\n      this.engine.on('block', function(block) {\n        console.log('BLOCK CHANGED:', '#'+block.number.toString('hex'), '0x'+block.hash.toString('hex'))\n      })\n\n      // network connectivity error\n      this.engine.on('error', function(err){\n        // report connectivity errors\n        console.error(err.stack)\n      });\n\n      // start polling for blocks\n      this.engine.start()\n    }\n    this.contract = this.web3.eth.contract(ShardStore.abi).at(options.at || \"0x8cdaf0cd259887258bc13a92c0a6da92698644c0\");\n\n    if(this.localStorage) {\n      this.web3.eth.getAccounts((err, accounts) => {\n        var shardList = JSON.parse(this.localStorage.getItem(`${accounts[0]}:shards`));\n        for(var shard of shardList) {\n          getStorageConfirmed(shard);\n        }\n      });\n    }\n  }\n\n  stop() {\n    if(this.engine) {\n      this.engine.stop();\n    }\n  }\n\n  deploy() {\n    this.web3.eth.getAccounts((err, accounts) => {\n      if(err) {\n        console.log(err);\n        return;\n      }\n      var defaultAccount = accounts[0];\n      this.web3.eth.contract(ShardStore.abi).new({data: ShardStore.bytecode, gas: 1000000, from: defaultAccount}, (err, data) => {\n        console.log(data);\n      });\n    })\n  }\n\n  confirmStorage(shardIds) {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.getAccounts((err, accounts) => {\n        if(err) { reject(err); return; }\n        var defaultAccount = accounts[0];\n        var shardNumbers = [];\n        for(var shardId of shardIds){\n          shardNumbers.push(new BigNumber(shardId, 16));\n        }\n        console.log(shardNumbers);\n        this.contract.confirmStorage.estimateGas(shardNumbers, {from: defaultAccount}, (err, gas) => {\n          this.contract.confirmStorage(shardNumbers, {from: defaultAccount, gas: gas}, (err, tx) => {\n            if(err) {\n              reject(err);\n              return;\n            }\n            var confirmations = [];\n            for(var shardId of shardIds) {\n              confirmations.push(this.watchStorageConfirmed(shardId));\n            }\n            resolve(Promise.all(confirmations));\n          });\n        })\n      });\n    })\n  }\n\n  watchStorageConfirmed(shardId) {\n    return new Promise((resolve, reject) => {\n      var watcher = this.contract.StorageConfirmed({fromBlock: \"latest\", shardId: new BigNumber(shardId, 16)});\n      watcher.watch((err, evt) => {\n        if(err) {\n          watcher.stopWatching(() => {});\n          reject(err)\n        }\n        watcher.stopWatching(() => {});\n        if(this.localStorage) {\n          this.localStorage.setItem(`shard:${shardId}`, JSON.stringify({block: evt.blockNumber, trustedContact: evt.args.trustedContact}));\n        }\n        resolve({block: evt.blockNumber, trustedContact: evt.args.trustedContact});\n      });\n    });\n  }\n\n  getStorageConfirmed(shardId) {\n    if(this.localStorage) {\n      var shardData = JSON.parse(this.localStorage.getItem(`shard:${shardId}`));\n    } else {\n      var shardData = {block: 0};\n    }\n    return new Promise((resolve, reject) => {\n      var watcher = this.contract.StorageConfirmed({fromBlock: shardData.block, shardId: new BigNumber(shardId, 16)});\n      watcher.get((err, evts) => {\n        if(err) {\n          reject(err)\n        }\n        for(var evt of evts) {\n          if(evt.blockNumber > shardData.block) {\n            if(this.localStorage) {\n              this.localStorage.setItem(`shard:${shardId}`, JSON.stringify({block: evt.blockNumber, trustedContact: evt.args.trustedContact}));\n            }\n            resolve({block: evt.blockNumber, trustedContact: evt.args.trustedContact});\n          }\n        }\n      });\n    });\n  }\n  getShardStatus() {\n    return new Promise((resolve, reject) => {\n      if(!this.localStorage) {\n        resolve([]);\n      }\n      this.web3.eth.getAccounts((err, accounts) => {\n        var shardIds = JSON.parse(this.localStorage.getItem(`${accounts[0]}:shards`));\n        var shards = [];\n        for(var shardId of shardIds) {\n          var shard = JSON.parse(this.localStorage.getItem(`shard:${shardId}`));\n          shard.update = this.watchStorageConfirmed(shardId);\n        }\n      });\n    })\n  }\n\n\n\n}\n"],"names":["INVALID_ENTROPY","INVALID_MNEMONIC","INVALID_CHECKSUM","bytesToBinary","bytes","map","x","lpad","toString","join","binaryToByte","bin","parseInt","str","padString","length","deriveChecksumBits","entropyBuffer","ENT","CS","hash","createHash","update","digest","slice","call","entropyToMnemonic","entropy","wordlist","Buffer","isBuffer","from","bip39","wordlists","EN","TypeError","entropyBits","checksumBits","bits","chunks","match","words","binary","index","JA","mnemonicToEntropy","mnemonic","unorm","nfkd","split","word","indexOf","Error","dividerIndex","Math","floor","entropyBytes","newChecksum","ApiEndpoint","apiServer","body","rp","shardid","passwordStore","KeySplit","password","apiUrl","shareCount","threshold","key","salt","crypto","randomBytes","Promise","resolve","reject","pbkdf2","err","pbkdf2Pass","c","createCipher","encKey","final","splitVal","shares","secrets","share","mnemonicShares","push","shareHex","combine","d","createDecipher","rawKey","shard","uploader","shardHex","result","encShard","upload","data","then","response","objectid","pathAndKey","downloader","download","log","pbkdf2Sync","KeySplitContractInterface","options","rpcURL","window","localStorage","currentProvider","web3","Web3","privateKey","getItem","Wallet","generate","getPrivateKeyString","wallet","fromPrivateKey","engine","ProviderEngine","addProvider","FixtureSubprovider","FilterSubprovider","WalletSubprovider","Web3Subprovider","providers","HttpProvider","on","block","number","error","stack","start","contract","eth","ShardStore","abi","at","getAccounts","accounts","shardList","JSON","parse","stop","defaultAccount","new","bytecode","gas","shardIds","shardNumbers","shardId","BigNumber","confirmStorage","estimateGas","tx","confirmations","watchStorageConfirmed","all","watcher","StorageConfirmed","fromBlock","watch","evt","stopWatching","setItem","stringify","blockNumber","trustedContact","args","shardData","get","evts","shards"],"mappings":"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"}