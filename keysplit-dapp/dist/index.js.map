{"version":3,"file":null,"sources":["../src/wordEncode.js","../src/KeySplit.js"],"sourcesContent":["/*\n * This module does bip39-like encoding of byte strings to words. It removes\n * the constraint from the original bip39 module to ensure that the encoded\n * bytes are 128 < x < 256 bits. We still want to use bip39 for encoding and\n * decoding actual keys, but when it comes to encoding the Shamir's Secret\n * Sharing shards we want a human-readable encoding that can exceed 256 bits\n * and may not be divisible by 4.\n */\n\nimport bip39 from 'bip39';\nimport createHash from 'create-hash';\nimport unorm from 'unorm';\n\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\n\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nexport function entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === bip39.wordlists.JA ? words.join('\\u3000') : words.join(' ')\n}\n\nexport function mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || bip39.wordlists.EN;\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  // if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n","import secrets from 'secrets.js-next';\nimport bip39 from 'bip39';\nimport {entropyToMnemonic} from './wordEncode.js';\nimport {mnemonicToEntropy} from './wordEncode.js';\nimport {cipher} from 'crypto';\n\nfunction repeat(char, number) {\n  var string = \"\";\n  for(var i = 0; i < number; i++) {\n    string += char;\n  }\n  return string;\n}\n\nvar KeySplit = {\n  mnemonicToSSS(mnemonic, shareCount, threshold, password) {\n    var key = bip39.mnemonicToEntropy(mnemonic);\n    var c = crypto.createCipher(\"aes128\", password);\n    var encKey = c.update(key, 'hex', 'hex');\n    encKey += c.final('hex')\n    console.log(encKey);\n    var shares = secrets.share(encKey, shareCount, threshold);\n    var mnemonicShares = [];\n    for(var share of shares) {\n      mnemonicShares.push(entropyToMnemonic(share + \"000\"));\n    }\n    return mnemonicShares\n  },\n  combineSSS(mnemonicShares, password) {\n    var shares = [];\n    for(var share of mnemonicShares) {\n      var shareHex = mnemonicToEntropy(share);\n      shares.push(shareHex.slice(0, shareHex.length - 3));\n    }\n    var encKey = secrets.combine(shares);\n    console.log(encKey);\n    var d = crypto.createDecipher(\"aes128\", password);\n    var rawKey = d.update(encKey, \"hex\", \"hex\");\n    rawKey += d.final(\"hex\");\n    return bip39.entropyToMnemonic(rawKey);\n  }\n};\n\nexport default KeySplit;\n"],"names":["INVALID_ENTROPY","INVALID_MNEMONIC","INVALID_CHECKSUM","bytesToBinary","bytes","map","x","lpad","toString","join","binaryToByte","bin","parseInt","str","padString","length","deriveChecksumBits","entropyBuffer","ENT","CS","hash","createHash","update","digest","slice","call","entropyToMnemonic","entropy","wordlist","Buffer","isBuffer","from","bip39","wordlists","EN","TypeError","entropyBits","checksumBits","bits","chunks","match","words","binary","index","JA","mnemonicToEntropy","mnemonic","unorm","nfkd","split","word","indexOf","Error","dividerIndex","Math","floor","entropyBytes","newChecksum","KeySplit","shareCount","threshold","password","key","c","crypto","createCipher","encKey","final","log","shares","secrets","share","mnemonicShares","push","shareHex","combine","d","createDecipher","rawKey"],"mappings":"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"}